// Code generated by go-bindata.
// sources:
// html-templates/layout.tpl
// html-templates/login.tpl
// html-templates/recover_end.tpl
// html-templates/recover_start.tpl
// html-templates/register.tpl
// email-templates/confirm_html.tpl
// email-templates/confirm_txt.tpl
// email-templates/recover_html.tpl
// email-templates/recover_txt.tpl
// DO NOT EDIT!

package abrenderer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlTemplatesLayoutTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x0a\x0a\x0a\x0a\x36\x19\xa9\x89\x29\x10\x26\x98\x5b\x92\x59\x92\x93\x6a\x57\x5d\x9d\x94\x93\x9f\x9c\xad\xa0\x04\xe6\x2a\x29\xe8\xd5\xd6\x56\x57\xa7\xe6\xa5\xd4\xd6\xda\xe8\x43\x54\x40\x34\xeb\x23\x74\xdb\x24\xe5\xa7\x54\x22\x0c\x82\x9b\x90\x58\x5a\x92\x91\x94\x5f\x5c\x8c\x6c\x08\x54\x33\x44\x87\x8d\x3e\xc4\x35\x80\x00\x00\x00\xff\xff\x8e\x27\x12\xb2\xa5\x00\x00\x00")

func htmlTemplatesLayoutTplBytes() ([]byte, error) {
	return bindataRead(
		_htmlTemplatesLayoutTpl,
		"html-templates/layout.tpl",
	)
}

func htmlTemplatesLayoutTpl() (*asset, error) {
	bytes, err := htmlTemplatesLayoutTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html-templates/layout.tpl", size: 165, mode: os.FileMode(436), modTime: time.Unix(1521648822, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlTemplatesLoginTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xdd\x8e\xd4\x30\x0c\x85\xaf\xd9\xa7\xb0\x7c\x3f\xd3\x17\x68\x23\x21\xc1\x05\x12\x88\xd5\x82\xb8\x45\x69\xea\xd9\x46\x9b\x9f\xca\x71\xf7\x47\x51\xde\x1d\xa5\x9d\xb2\x94\x41\xc3\x5e\xb5\x75\x4f\xce\x77\x62\xbb\x3d\x45\xf6\xa0\x8d\xd8\x18\x3a\xcc\xd9\xc7\x39\xc8\xa4\x65\xa4\x01\xd0\xc5\x7b\x1b\xb0\x14\x04\x4f\x32\xc6\xa1\xc3\xdb\xaf\xdf\xbe\xa3\xba\x01\x00\xc8\xf9\xc9\xca\x08\x47\x62\x8e\x5c\x4a\xce\xc7\x52\xda\x9e\xa1\x51\x39\x53\x18\x4a\x59\x54\xad\x0d\xd3\x2c\x20\x2f\x13\x75\x28\xf4\x2c\x08\xc6\xe9\x94\x3a\xac\xe0\x83\x89\x41\x38\x3a\x84\xa0\x3d\x75\x48\x5e\x5b\x87\x30\x39\x6d\x68\x8c\x6e\x20\xee\xf0\xe3\x61\x2d\x3e\x6a\x37\x53\x8d\x78\x9c\xd8\x7a\xcd\x2f\x9f\x3e\xfc\xa8\xa5\x52\x50\xad\xdc\x4b\xe0\xa4\x53\x7a\x8a\x3c\x5c\x85\xbe\x8a\x76\xdc\xdb\xad\xbc\xb9\xbf\xdb\x6e\x6c\x12\x9f\x7e\x4a\x7c\xa0\x50\xca\x0e\x37\xda\x61\xa0\xb0\xf9\xbe\xca\xfe\x0c\x5f\xbb\xb9\x6f\xd1\x66\xeb\xe3\x30\x3b\x4a\xb5\x95\x6b\x81\xc9\x93\xef\x89\xff\xa2\x98\x91\xcc\x43\x1f\x9f\x37\x0e\xfb\xdf\xfe\xc2\x33\xa1\x82\xbb\xf3\x41\xf8\x42\x6d\xb3\x1c\x55\xbb\xc9\x2c\x0f\x38\x6c\x23\xea\x67\x91\x18\xce\xee\x69\xee\xbd\x15\x54\x9f\xeb\xec\xdb\x66\xfd\xa7\xfe\x17\xd4\xc4\xc7\x25\xe7\x42\x69\x35\x8c\x4c\xa7\x8b\x75\x3a\xcb\xea\x42\xa9\xbb\xf5\x1d\xde\x1b\x53\x25\x6d\xa3\xff\x1d\xee\x0a\xf3\xde\x26\x79\x0b\x74\xd5\x9d\xa9\xeb\xc7\x55\x6c\xdb\xd4\x2d\x51\x37\xbf\x02\x00\x00\xff\xff\xdd\x7e\x44\xaa\x1b\x03\x00\x00")

func htmlTemplatesLoginTplBytes() ([]byte, error) {
	return bindataRead(
		_htmlTemplatesLoginTpl,
		"html-templates/login.tpl",
	)
}

func htmlTemplatesLoginTpl() (*asset, error) {
	bytes, err := htmlTemplatesLoginTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html-templates/login.tpl", size: 795, mode: os.FileMode(436), modTime: time.Unix(1525721321, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlTemplatesRecover_endTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x4f\x72\xab\x30\x0c\xc6\xd7\x2f\xa7\xd0\x68\xf5\xba\x28\xbe\x80\xf1\x26\x07\x68\xa6\xed\x3e\xe3\x60\x51\x3c\x05\x9b\x11\x26\x69\xc7\xe3\xbb\x77\x08\xa6\xf4\xff\xa4\x5d\x21\xe9\x13\x1f\x3f\x09\xc9\xda\x73\x07\xba\x0a\xd6\xbb\x12\x63\xec\xfc\xe8\x42\xaf\x43\x43\x06\x90\xa9\xf2\x47\x62\x41\xce\x60\x4a\x08\x1d\x85\xc6\x9b\x12\x77\x37\x77\xf7\xa8\x36\xff\x62\x3c\xd9\xd0\x40\x41\xcc\x9e\x87\x94\x72\xfe\xdf\x3a\x43\x4f\x50\x00\xe2\xd5\x54\x64\xed\x1e\x08\x8a\x94\xe4\xd0\x6b\xa7\x62\x9c\x42\x71\x8e\xe5\x81\x41\xa8\x18\xc9\x99\xa9\x73\x7d\xc0\x75\x4a\x1b\x00\x00\x69\x5d\x3f\x06\x08\xcf\x3d\x95\xd8\xeb\x61\x38\x79\x36\x08\x4e\x77\xef\xf2\xbe\xd5\x15\x35\xbe\x35\xc4\x25\xee\x5e\xcb\x47\xdd\x8e\x54\x22\x82\xc8\x9f\xfa\x0a\x3a\xf3\x2d\x66\x97\x71\x5e\x06\x58\x79\x57\x5b\xee\xf6\xdf\x80\x6e\x67\x19\xfe\x06\xfc\xd1\xfc\xb7\xe0\x87\x31\x04\xef\x32\xf9\x30\x1e\x3a\x1b\x50\xdd\xce\xff\x5c\x8a\x59\x5d\x28\xce\x2f\x68\x68\x98\xea\x12\x05\xaa\xad\x76\x15\xb5\x52\x68\xf5\x79\x09\x8d\x35\x86\xdc\xb2\x82\xe0\x1f\xa7\x24\x0f\x16\x63\x91\xaf\x6a\x7f\x16\xa6\xb3\xca\xf6\xcb\x9c\xd5\xc0\xf5\x22\xfe\xe0\xbb\xb6\xbd\x35\x9f\xfd\xd6\x41\xa5\x98\x0e\x5c\x6d\x5e\x02\x00\x00\xff\xff\xa6\x15\x7c\x36\xe8\x02\x00\x00")

func htmlTemplatesRecover_endTplBytes() ([]byte, error) {
	return bindataRead(
		_htmlTemplatesRecover_endTpl,
		"html-templates/recover_end.tpl",
	)
}

func htmlTemplatesRecover_endTpl() (*asset, error) {
	bytes, err := htmlTemplatesRecover_endTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html-templates/recover_end.tpl", size: 744, mode: os.FileMode(436), modTime: time.Unix(1525720604, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlTemplatesRecover_startTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x41\x4e\x04\x21\x10\x45\xf7\x7d\x8a\x4a\xed\x67\xb8\x00\xb0\x31\xae\x35\xea\xde\xd0\x4d\xb5\x10\xa1\xe8\x30\xd5\xa3\x86\x70\x77\xd3\x41\xa3\xb3\xad\xfa\x79\x79\xff\xeb\xb5\xd4\x0c\x6e\x91\x58\xd8\x60\x6b\xb9\xec\x2c\x9b\x93\x40\x1e\xb0\xd2\x52\xae\x54\xb1\x77\x84\x4c\x12\x8a\x37\xf8\xf8\xf0\xfc\x82\x76\x02\x00\xd0\x91\xb7\x5d\x40\xbe\x36\x32\x28\xf4\x29\x08\xec\x32\x19\xa4\xec\x62\x42\xd8\x92\x5b\x28\x94\xe4\xa9\x1a\xbc\x3f\x8d\xa3\xb2\x7a\xae\xa0\x06\xa1\xb5\x8f\x28\x01\xce\xcb\xa5\xae\xaf\x52\xde\x89\x7b\xbf\xa1\x86\xe8\x3d\xf1\x2f\xf7\x2f\x86\x70\x75\x69\xa7\xc3\xf8\x7c\xd8\x29\xdb\x1a\xb1\x87\x53\xef\x43\x6d\xde\x45\x0a\xff\x50\x2e\xfb\x9c\xa3\xa0\x7d\x1a\x7d\xb4\x1a\xdf\xff\x26\xda\x41\xa8\xb4\x1a\x54\xa9\xbc\x45\x46\x7b\xe7\x78\xa1\xa4\x95\xb3\x93\x56\xc7\x48\x76\xfa\x0e\x00\x00\xff\xff\x06\x4c\x29\x0e\x2c\x01\x00\x00")

func htmlTemplatesRecover_startTplBytes() ([]byte, error) {
	return bindataRead(
		_htmlTemplatesRecover_startTpl,
		"html-templates/recover_start.tpl",
	)
}

func htmlTemplatesRecover_startTpl() (*asset, error) {
	bytes, err := htmlTemplatesRecover_startTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html-templates/recover_start.tpl", size: 300, mode: os.FileMode(436), modTime: time.Unix(1525138168, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlTemplatesRegisterTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xcd\x6e\xdc\x20\x10\x80\xcf\xeb\xa7\x18\xcd\xa9\x3d\xc4\xbe\x57\x98\x4b\xd4\x7b\xd4\x17\x88\x58\x33\x8e\x51\x6d\x40\x03\x4e\x52\x21\xde\xbd\x62\xfd\xd7\x4d\xfa\xb3\xcd\xc9\xcc\x78\x18\xbe\x0f\x0d\xa2\x77\x3c\x81\xea\xa2\x71\xb6\xc5\x94\x26\x37\xdb\xe8\x55\x1c\x48\x03\x32\x3d\x99\x10\x89\x31\x67\x84\x89\xe2\xe0\x74\x8b\xde\x85\x88\xb2\x3a\xa5\xf4\x62\xe2\x00\x35\x31\x3b\x0e\x39\xaf\xf1\x27\x63\x35\xbd\x42\x0d\x88\x9f\x4b\x92\x95\x7d\x22\xa8\x73\x16\xc1\x2b\x2b\x53\x2a\xcb\xe6\xb2\x16\x67\x86\x46\xa6\x44\x56\x97\xca\xe3\x03\x77\x39\x57\x27\x31\xaa\x33\x8d\xd0\x3b\x6e\x91\x26\x65\x46\x94\x5f\xef\xca\xf7\x8b\x68\x2e\xbf\x64\x75\x12\xc6\xfa\x39\x82\x55\x13\x6d\x45\x10\x7f\x78\x6a\x31\xd2\x6b\x44\x78\x56\xe3\x4c\xc5\x6b\x61\xf5\x4c\x81\xf8\x99\x76\xda\xfa\xb2\xa7\x84\xf5\x35\x42\x31\xf6\xa3\xea\x68\x70\xa3\x26\x6e\x71\x39\x1a\xa1\x59\xb1\x7f\x77\x01\xab\xeb\xda\xf3\x16\xe1\xf7\xa6\x5e\x85\xf0\xe2\x58\xa3\x7c\x58\x57\x7f\xd2\xdd\x2b\x57\xe3\x23\xbe\x02\x7f\xd8\xd3\x37\xa0\x6f\x3d\x3e\x4a\xdf\x39\xdb\x1b\x9e\x1e\x0f\x8b\xfb\x25\x03\xff\xb2\x79\xb7\xf3\xef\x56\x6f\xdb\xde\x64\xf7\xf6\x8c\xff\xb2\x5c\x60\x17\xa8\x30\x9f\x27\x73\x8c\xd7\xb7\xed\x9d\xec\x08\x42\xc1\xc0\xd4\xb7\xd8\xa0\xbc\x57\xb6\xa3\x51\x34\x4a\x56\x07\x5b\x17\xb8\x7f\x8c\xee\x3b\xd9\x9c\xaf\x5a\x0f\x46\x6b\xb2\xb8\xdd\xca\x5e\xf6\xcb\x2c\xd7\x65\x38\x77\xc6\x4a\x34\xe5\x0d\xcb\xea\x67\x00\x00\x00\xff\xff\xf4\x17\x43\xcb\xcb\x03\x00\x00")

func htmlTemplatesRegisterTplBytes() ([]byte, error) {
	return bindataRead(
		_htmlTemplatesRegisterTpl,
		"html-templates/register.tpl",
	)
}

func htmlTemplatesRegisterTpl() (*asset, error) {
	bytes, err := htmlTemplatesRegisterTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html-templates/register.tpl", size: 971, mode: os.FileMode(436), modTime: time.Unix(1525368703, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _emailTemplatesConfirm_htmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xc1\x0d\xc2\x30\x0c\x05\xd0\x7b\xa6\xf8\xea\x00\x44\xbd\x1b\x5f\x58\x80\x15\x8c\xe5\xca\x15\xa1\xae\x4c\x73\x40\x55\x76\x67\x81\x2e\xf0\xc8\x67\x7e\xc4\xb6\xac\xf9\xc1\x2f\x7a\x42\x54\xa3\x6f\x07\x55\x9f\xb9\xd0\x2b\x51\xb9\xd0\xce\xcf\x66\xf2\x35\x68\x5b\xf5\x0d\x12\x78\xda\x72\x9f\xce\xf3\xd6\xb3\x8d\x31\xa1\xb2\x5b\x1a\x55\x61\x1c\x01\xbd\x14\x77\x2e\xff\x00\x00\x00\xff\xff\xdc\x7c\x99\x43\x6f\x00\x00\x00")

func emailTemplatesConfirm_htmlTplBytes() ([]byte, error) {
	return bindataRead(
		_emailTemplatesConfirm_htmlTpl,
		"email-templates/confirm_html.tpl",
	)
}

func emailTemplatesConfirm_htmlTpl() (*asset, error) {
	bytes, err := emailTemplatesConfirm_htmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "email-templates/confirm_html.tpl", size: 111, mode: os.FileMode(436), modTime: time.Unix(1525368498, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _emailTemplatesConfirm_txtTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xc8\xb1\x0d\xc2\x30\x10\x05\xd0\x9e\x29\xfe\x04\xcc\xc2\x00\x69\x8c\xb9\x80\xc5\xf1\x7f\x74\x3e\x2b\x8a\x22\xef\x4e\x91\xf6\x3d\xdc\x4a\x37\x54\x6d\x07\x0a\x5f\xd8\x4a\x4f\x43\x7e\x0c\xab\xdc\xb5\x37\xbe\xe1\x8d\x5f\x34\xa6\x70\x68\x04\x9e\xa1\xbd\x5b\x20\x85\x2a\xae\x2d\x7e\x97\x97\x5a\x35\x98\x0b\x17\x9e\xe7\x7d\x84\xcf\x79\xfb\x07\x00\x00\xff\xff\x07\x81\x24\x0a\x5f\x00\x00\x00")

func emailTemplatesConfirm_txtTplBytes() ([]byte, error) {
	return bindataRead(
		_emailTemplatesConfirm_txtTpl,
		"email-templates/confirm_txt.tpl",
	)
}

func emailTemplatesConfirm_txtTpl() (*asset, error) {
	bytes, err := emailTemplatesConfirm_txtTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "email-templates/confirm_txt.tpl", size: 95, mode: os.FileMode(436), modTime: time.Unix(1525368504, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _emailTemplatesRecover_htmlTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xcc\xc1\x09\xc2\x40\x10\x05\xd0\xfb\x56\xf1\x49\x01\x2e\xb9\x8f\x53\x83\xd8\x80\xac\xc3\xc8\x88\x8b\x13\xbe\x59\x41\x42\x7a\xf7\xe0\xd5\x02\xde\x93\x98\xf5\xec\x96\x6f\x27\x3e\x39\x88\x66\x96\xe3\xb9\x4a\x8d\x59\x8b\x5c\x89\xaa\x45\x16\x3d\x75\x6f\x2f\x87\xf5\xbb\x3d\x20\x0d\x41\xbf\x1d\xa7\x6d\x3b\xf0\x87\x2f\x83\x7d\xdf\x27\x54\x0d\xa7\x4b\x6d\x8a\x35\xc1\xbf\xf3\xa2\xe5\x1b\x00\x00\xff\xff\x92\x3d\x16\x9c\x77\x00\x00\x00")

func emailTemplatesRecover_htmlTplBytes() ([]byte, error) {
	return bindataRead(
		_emailTemplatesRecover_htmlTpl,
		"email-templates/recover_html.tpl",
	)
}

func emailTemplatesRecover_htmlTpl() (*asset, error) {
	bytes, err := emailTemplatesRecover_htmlTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "email-templates/recover_html.tpl", size: 119, mode: os.FileMode(436), modTime: time.Unix(1525719552, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _emailTemplatesRecover_txtTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xc8\x41\x0e\x82\x40\x0c\x05\xd0\xbd\xa7\xf8\x27\xf0\x2c\x1e\x80\xc4\x8c\xb5\x68\x63\xed\x27\x9d\x8e\x84\x10\xee\xee\x82\xed\xbb\xb9\xb6\xae\x10\x2e\x1b\x5a\x3c\xb1\xb4\x5e\x8a\x7a\x2b\x66\xba\x73\xb5\x78\xc1\x2d\x3e\xb0\x28\x62\xe3\x48\x3c\x92\x6b\xd7\x44\x11\xc2\x98\x2d\xbf\xa7\x37\x11\x8e\xa8\x29\xa6\xd8\xf7\x6b\xaa\xf0\xa7\x79\x1f\xe9\xc7\x71\xf9\x07\x00\x00\xff\xff\x7f\x48\x0e\x70\x67\x00\x00\x00")

func emailTemplatesRecover_txtTplBytes() ([]byte, error) {
	return bindataRead(
		_emailTemplatesRecover_txtTpl,
		"email-templates/recover_txt.tpl",
	)
}

func emailTemplatesRecover_txtTpl() (*asset, error) {
	bytes, err := emailTemplatesRecover_txtTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "email-templates/recover_txt.tpl", size: 103, mode: os.FileMode(436), modTime: time.Unix(1525719558, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html-templates/layout.tpl": htmlTemplatesLayoutTpl,
	"html-templates/login.tpl": htmlTemplatesLoginTpl,
	"html-templates/recover_end.tpl": htmlTemplatesRecover_endTpl,
	"html-templates/recover_start.tpl": htmlTemplatesRecover_startTpl,
	"html-templates/register.tpl": htmlTemplatesRegisterTpl,
	"email-templates/confirm_html.tpl": emailTemplatesConfirm_htmlTpl,
	"email-templates/confirm_txt.tpl": emailTemplatesConfirm_txtTpl,
	"email-templates/recover_html.tpl": emailTemplatesRecover_htmlTpl,
	"email-templates/recover_txt.tpl": emailTemplatesRecover_txtTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"email-templates": &bintree{nil, map[string]*bintree{
		"confirm_html.tpl": &bintree{emailTemplatesConfirm_htmlTpl, map[string]*bintree{}},
		"confirm_txt.tpl": &bintree{emailTemplatesConfirm_txtTpl, map[string]*bintree{}},
		"recover_html.tpl": &bintree{emailTemplatesRecover_htmlTpl, map[string]*bintree{}},
		"recover_txt.tpl": &bintree{emailTemplatesRecover_txtTpl, map[string]*bintree{}},
	}},
	"html-templates": &bintree{nil, map[string]*bintree{
		"layout.tpl": &bintree{htmlTemplatesLayoutTpl, map[string]*bintree{}},
		"login.tpl": &bintree{htmlTemplatesLoginTpl, map[string]*bintree{}},
		"recover_end.tpl": &bintree{htmlTemplatesRecover_endTpl, map[string]*bintree{}},
		"recover_start.tpl": &bintree{htmlTemplatesRecover_startTpl, map[string]*bintree{}},
		"register.tpl": &bintree{htmlTemplatesRegisterTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

